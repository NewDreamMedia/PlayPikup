rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ========================================
    // Helper Functions
    // ========================================
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isMatchCreator() {
      return request.auth != null && 
             request.auth.uid == resource.data.creatorId;
    }
    
    function isMatchParticipant() {
      return request.auth != null && 
             request.auth.uid in resource.data.playerIds;
    }
    
    function isIncomingMatchParticipant() {
      return request.auth != null && 
             request.auth.uid in request.resource.data.playerIds;
    }
    
    // Check if only score-related fields are being updated
    function isUpdatingScoreFields() {
      let changedKeys = request.resource.data.diff(resource.data).affectedKeys();
      let scoreFields = ['setScores', 'scoreSubmittedBy', 'scoreApprovals', 
                        'scoreVerified', 'winnerId', 'playerOutcomes', 
                        'status', 'completedAt', 'updatedAt', 'proposedScores',
                        'hasDispute', 'matchStatistics'];
      return changedKeys.hasAny(scoreFields);
    }
    
    // Check if only player management fields are being updated
    function isUpdatingPlayerFields() {
      let changedKeys = request.resource.data.diff(resource.data).affectedKeys();
      let playerFields = ['playerIds', 'playerConfirmations', 'status', 'updatedAt',
                         'subNeeded', 'subNeededReason'];
      return changedKeys.hasOnly(playerFields);
    }
    
    // Validate match status transitions
    function isValidStatusTransition() {
      let oldStatus = resource.data.status;
      let newStatus = request.resource.data.status;
      
      // Allow certain status transitions
      return (
        // Open to Full when match is full
        (oldStatus == 'open' && newStatus == 'full') ||
        // Full to Open when player leaves
        (oldStatus == 'full' && newStatus == 'open') ||
        // Any to Confirmed
        (newStatus == 'confirmed') ||
        // Confirmed to InProgress
        (oldStatus == 'confirmed' && newStatus == 'inProgress') ||
        // Any to Completed (for score submission)
        (newStatus == 'completed') ||
        // Any to Cancelled (only by creator)
        (newStatus == 'cancelled' && isMatchCreator())
      );
    }
    
    // Check if user data update is valid
    function isValidUserUpdate() {
      let changedKeys = request.resource.data.diff(resource.data).affectedKeys();
      let restrictedFields = ['id', 'email', 'createdAt'];
      return !changedKeys.hasAny(restrictedFields);
    }
    
    // ========================================
    // Users Collection Rules
    // ========================================
    
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId) && 
                      request.resource.data.id == userId;
      allow update: if isOwner(userId) && isValidUserUpdate();
      allow delete: if false; // Users cannot delete their accounts via direct write
      
      // User statistics subcollection
      match /statistics/{statId} {
        allow read: if isAuthenticated();
        allow write: if isOwner(userId);
      }
    }
    
    // ========================================
    // Matches Collection Rules
    // ========================================
    
    match /matches/{matchId} {
      allow read: if isAuthenticated();
      
      // Create match with proper validation
      allow create: if isAuthenticated() && 
                      request.resource.data.creatorId == request.auth.uid &&
                      request.resource.data.playerIds.hasAll([request.auth.uid]);
      
      // Update rules for matches
      allow update: if isAuthenticated() && (
        // Creator can update anything except changing the creator
        (isMatchCreator() && request.resource.data.creatorId == resource.data.creatorId) ||
        // Any authenticated user can join an open match
        (resource.data.status == 'open' && isIncomingMatchParticipant() && isUpdatingPlayerFields()) ||
        // Participants can leave match (update player fields)
        (isMatchParticipant() && isUpdatingPlayerFields()) ||
        // Participants can update scores after match completion
        (isMatchParticipant() && isUpdatingScoreFields() && 
         (resource.data.status == 'completed' || request.resource.data.status == 'completed'))
      );
      
      // Only creator can delete their own matches
      allow delete: if isMatchCreator() && 
                      resource.data.status in ['open', 'cancelled'];
      
      // Disputes subcollection
      match /disputes/{disputeId} {
        allow read: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/matches/$(matchId)).data.playerIds;
        allow create: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/matches/$(matchId)).data.playerIds &&
          request.resource.data.userId == request.auth.uid;
        allow update: if false; // Disputes are immutable once created
        allow delete: if false; // Disputes cannot be deleted
      }
      
      // Match messages/chat subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/matches/$(matchId)).data.playerIds;
        allow create: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/matches/$(matchId)).data.playerIds &&
          request.resource.data.senderId == request.auth.uid;
        allow update: if false; // Messages are immutable
        allow delete: if false; // Messages cannot be deleted
      }
    }
    
    // ========================================
    // Tennis Courts Collection Rules
    // ========================================
    
    match /tennisCourts/{courtId} {
      allow read: if isAuthenticated();
      allow create: if false; // Only admin via admin SDK
      allow update: if false; // Only admin via admin SDK
      allow delete: if false; // Only admin via admin SDK
      
      // Court reviews subcollection
      match /reviews/{reviewId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && 
                        request.resource.data.userId == request.auth.uid;
        allow update: if isAuthenticated() && 
                        resource.data.userId == request.auth.uid;
        allow delete: if false;
      }
    }
    
    // ========================================
    // Notifications Collection Rules
    // ========================================
    
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (
        request.auth.uid in resource.data.recipients ||
        request.auth.uid == resource.data.sentBy
      );
      allow create: if isAuthenticated() &&
                      request.resource.data.sentBy == request.auth.uid;
      allow update: if isAuthenticated() && 
                      request.auth.uid in resource.data.recipients &&
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']);
      allow delete: if false; // Notifications are immutable
    }
    
    // ========================================
    // Match Templates Collection Rules
    // ========================================
    
    match /matchTemplates/{templateId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                      request.resource.data.creatorId == request.auth.uid;
      allow update: if isAuthenticated() && 
                      resource.data.creatorId == request.auth.uid;
      allow delete: if isAuthenticated() && 
                      resource.data.creatorId == request.auth.uid;
    }
    
    // ========================================
    // Reports Collection Rules (for reporting issues)
    // ========================================
    
    match /reports/{reportId} {
      allow read: if false; // Only admins can read reports
      allow create: if isAuthenticated() && 
                      request.resource.data.reporterId == request.auth.uid;
      allow update: if false; // Reports are immutable
      allow delete: if false; // Reports cannot be deleted
    }
    
    // ========================================
    // App Settings Collection Rules
    // ========================================
    
    match /appSettings/{document} {
      allow read: if true; // Public app settings
      allow write: if false; // Only admin can modify
    }
  }
}